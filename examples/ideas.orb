foo := 123, 0x59fa0, 0b0110011001
foo -> |a, b, c| {
    std.io.printf("{}, {}, {}", [a, b, c])
}

bar := foo -> |a, _, _| a -> #(-2) -> #(1-)
baz := ("hi", foo, ()) -> |x, (a, b, c), y| (x.len % a, b, c)

true -> |true| "true" -> print()
match true {
    true => print("true")
    _ => {}
}

false -> |true| "false" -> print()
match false {
    true => print("false")
    _ => {}
}

true -> |false| "false" -> print()
match true {
    false => print("false")
    _ => {}
}

false -> |false| "true" -> print()
match false {
    false => print("true")
    _ => {}
}

|true| "true" -> print()
if true {
    print("true")
}

|false| "false" -> print()
if false {
    print("false")
}

true -> then print("true") else print("false")

foo -> match {
    |5, _, _| "five"
    |_, true, _| "true"
    |_, false, _| "false"
    |_, _, c| when (c % 2 == 0) c
    |_, _, c| |c % 2 == 0| c
    |_, _, c| (c % 2 == 0 -> then c)
    |_, _, c| c % 2 == 0 -> then c

    |_, _, c| c -> match {
        |'a'| "A"
        |'b'| "B"
        |c| c - 5
    }
} -> print()

c, r, w := Channel(int).new() -> |c| {
    r := c.create_reader()
    w := c.create_writer()
    c, r, w
}
defer w.close()

go :: fn(data: $T, body: fn(T) void) void {
    # in a separate thread:
    body(data)
}

foo(1, 2)
foo(1) 2

|a| a + 1

go2(r) |reader| loop {
    reader.read() -> match {
        |Some(d)| printf("received {}", [d])
        |None| {
            print("channel closed")
            break
        }
    }
}

1..=10 -> for |v, i| {
    printf("sending {}", [i])
    w.write(v)
}
5 |> (+1) ||


loop |i| {
    random.int() % 2 == 0 -> then { i -> break } else print("odd...")
} -> print()

print(loop |i| {
    random.int() % 2 == 0 -> then { i -> break } else print("odd...")
})

0..10 -> :outer for |y| {
    0..10 -> for |x| {
        x + y == 5 -> then {
            break :outer
        } else x - y == 2 -> then {
            break
        } else {
            continue
        }

        print("lol")
    }
}

Vec :: struct(T: type) {
    pub x, y, z : T

    pub add :: fn(Self, a: Self) Self {
        return (x + a.x, y + a.y, z + a.z)
    }
}

Vec -> impl |T| Add(Vec(T)) {
    use Vec(T).add
}

Vec -> for |Vec| {
    @log("Instance of Vec(T): " .. Vec .. "(" .. Vec.T .. ")")
}

SoaMemberRef :: struct(T: struct, Mut: bool) {
    @insert() T.members -> for |m| {
        yield @meta(...m.meta) @pub(m.public) @id(m.name) : @mut(Mut) &m.type
    }

    pub take :: fn(&Self) T {
        return T(
            @insert() T.members -> for |m| {
                yield .@id(m.name) = self.@id(m.name).*
            }
        )
    }
}

Soa :: struct(T: struct) {
    @insert() T.members -> for |m| {
        # skip members with no_soa = true
        @try_get(m.meta.no_soa) -> |Some(v)| v -> then continue
        @try_get(m.meta.no_soa) -> match {
            |Some(v)| v -> then continue
            |Some(v)| |v| continue
            |_| ()
        }

        # emit array of m.type, also copy metadata and pub modifier
        yield @meta(...m.meta, generated = true) @pub(m.public) @id(m.name) : Array(m.type)
    }

   #pub get :: fn(@mut($M) &Self, $member: string, index: usize) @mut(M) &T {
    pub get :: fn(&mut? Self, $member: string, index: usize) @mut(@typeof(self).mutable) &T {
        return &self.(@id(member))[index]
    }

    pub ref :: fn(&mut? Self, index: usize) SoaMemberRef(T, @typeof(self).mutable) {
        return (
            @insert() T.members -> for |m| {
                yield .(@id(m.name)) = @mut(@typeof(self).mutable) &self.(@id(m.name))
            }
        )
    }
}

    soa1 : Soa(Vec(f64)) = ([1, 4], [2, 5], [3, 6])
mut soa2 : Soa(Vec(f64)) = ([1, 4], [2, 5], [3, 6])

x1 : &f64     = soa1.get("x", 0)
x2 : &mut f64 = soa2.get("x", 0)
x3 : &f64     = soa2.get("x", 0)

r1 : SoaMemberRef(Vec(f64), false) = soa1.ref(2)
# r1.x : &64

r2 : SoaMemberRef(Vec(f64), true) = soa2.ref(2)
# r2.x : &mut 64

Numeric :: Add, Sub, Mul, Div, Copy

Matrix :: struct(T: type/Numeric, Rows: usize, Cols: usize) {
    pub values : [Rows * Cols]T = default

    pub new :: fn() Self {
        return ()
    }

    pub mul :: fn(Self, other: Matrix(Cols, $OtherCols)) Matrix(Rows, OtherCols) {
        mut result := Matrix(Rows, OtherCols).new()
        0..Rows -> for |row| {
            0..OtherCols -> for |col| {
                mut sum : T = 0
                0..Cols -> for |i| {
                    sum += values[i + row * Cols] * other.values[col + i * OtherCols]
                }
                result[col + row * OtherCols] = sum
            }
        }
        return result
    }
}

m := Matrix(f64, 4, 4).new()
v := Matrix(f64, 4, 1).new()

x : Matrix(f64, 4, 1) = m.mul(v)

SoaVectors :: Soa(Vec(f64))

SoaVectors :: Soa(struct{x, y, z : f64})

SoaVectors :: Soa() struct {
    @meta(version = "1.0.0") pub x : f64
    @meta(version = "1.0.0") pub y : f64
    @meta(version = "1.0.0") pub z : f64
    @meta(version = "1.0.0", no_soa=true) pub len : f64
}

SoaVectors :: struct {
    @meta(version = "1.0.0", generated=true) x : Array(f64)
    @meta(version = "1.0.0", generated=true) y : Array(f64)
    @meta(version = "1.0.0", generated=true) z : Array(f64)
}

hi(was, "geht?", 3) -> 123 -> if(lol, 3())

lol()()

lol().uiae()

||{}
|  |
{
    }

|a| b(a)

|
true, false,
lol, ("uiae")
b
| 5

|a, foo() || lol| a

a = foo() -> |a| a

x := a(5 = 5, 5)

x := Vec(x=2, y=7) ->
    |x, y| add(x, y) -> print()

Vec :: @meta() @struct(T) {
    x : T
    y : T
}

@range(0, 5) -> @for() |x, i| {
    print("{}: {}", i, x)
}
@insert() T.members -> @for() |m| {
    @yield() self.(@id(m.name)) = @mut(@typeof(self).mutable) self.(@id(m.name))
}

@pub() @meta() @struct() {
    lol = 5
}

5 -> @when(c) -> d
5 -> @when() c -> d
